/**
 * 编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。
 */
public class Solution {

    public static void main(String[] args) {
        System.out.println(hammingWeight(00000000000000000000000000001011));
        //System.out.println(00000000000000000000000010000000);
    }

    /***
     * 示例 1：
     *
     * 输入：00000000000000000000000000001011
     * 输出：3
     * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
     * 示例 2：
     *
     * 输入：00000000000000000000000010000000
     * 输出：1
     * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
     * 示例 3：
     *
     * 输入：11111111111111111111111111111101
     * 输出：31
     * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
     *
     * @param n
     * @return
     */
    // you need to treat n as an unsigned value
    public static int hammingWeight(int n) {

//        int bits = 0;
//        int mask = 1;
//        for (int i = 0; i < 32; i++) {
//            if ((n & mask) != 0) {
//                bits++;
//            }
//            mask <<= 1;
//        }
//        return bits;
        int count = 0;
        while (n != 0) {
            if ((n & 1) == 1) {
                count++;    // 判断最低位是否是 1，是则计数器 +1
            }
            n >>>= 1; // 舍弃最低位，继续判断下一位（会有负数情况，因此应该使用无符号右移）
        }
        return count;


    }
}
